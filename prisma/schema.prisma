// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Your custom fields
  username      String?   @unique
  
  // NextAuth required fields  
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Your relationships
  ownedStations Station[] @relation("StationOwner")
  sharedStations Station[] @relation("StationSharing")
  
  // NextAuth relationships
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Station {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Location
  latitude    Float
  longitude   Float
  
  // Station metadata
  name        String
  type        StationType @default(PUBLIC)
  tags        String?
  streamLink  String?
  streamName  String?
  favicon     String?
  likes       Int      @default(0)
  
  // Relationships
  ownerId     String?
  owner       User?    @relation("StationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  sharedUsers User[]   @relation("StationSharing")
}

enum StationType {
  PUBLIC
  PRIVATE
}
